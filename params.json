{"name":"Rails Email Preview","tagline":"Preview and edit app mailer templates in Rails.","body":"# Rails Email Preview [![Build Status][travis-badge]][travis] [![Test Coverage][coverage-badge]][coverage] [![Code Climate][codeclimate-badge]][codeclimate] [![Gitter](https://badges.gitter.im/Join Chat.svg)](https://gitter.im/glebm/rails_email_preview?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\r\n\r\nPreview email in the browser with this Rails engine. Compatible with Rails 3 and 4.\r\n\r\nPreview:\r\n![screenshot][rep-show-screenshot]\r\n\r\nList:\r\n![screenshot][rep-nav-screenshot]\r\n\r\nREP can use your application styles, markup is compatible with [bootstrap 3][rep-show-default-screenshot] by default.\r\n*These screenshots are using a custom Bootstrap theme*\r\n\r\n## Installation\r\n\r\nAdd [![Gem Version][gem-badge]][gem] to Gemfile:\r\n\r\n```ruby\r\ngem 'rails_email_preview', '~> 0.2.29'\r\n```\r\n\r\nAdd an initializer and the routes:\r\n\r\n```console\r\n$ rails g rails_email_preview:install\r\n```\r\n\r\nGenerate preview classes and method stubs in app/mailer_previews/\r\n\r\n```console\r\n$ rails g rails_email_preview:update_previews\r\n```\r\n\r\n## Usage\r\n\r\nThe last generator above will add a stub for each of your emails, then you populate the stubs with mock data:\r\n\r\n```ruby\r\n# app/mailer_previews/user_mailer_preview.rb:\r\nclass UserMailerPreview\r\n  # preview methods should return Mail objects, e.g.:\r\n  def invitation\r\n    UserMailer.invitation mock_user('Alice'), mock_user('Bob')\r\n  end\r\n\r\n  def welcome\r\n    UserMailer.welcome mock_user\r\n  end\r\n\r\n  private\r\n  # You can put all your mock helpers in a module\r\n  # or you can use your factories / fabricators, just make sure you are not creating anything\r\n  def mock_user(name = 'Bill Gates')\r\n    fake_id User.new(name: name, email: \"user#{rand 100}@test.com\")\r\n  end\r\n\r\n  def fake_id(obj)\r\n    # overrides the method on just this object\r\n    obj.define_singleton_method(:id) { 123 + rand(100) }\r\n    obj\r\n  end\r\nend\r\n```\r\n\r\n### Parameters as instance variables\r\n\r\nAll parameters in the search query will be available to the preview class as instance variables.\r\nFor example, if URL to mailer preview looks like:\r\n\r\n/emails/user_mailer_preview-welcome?**user_id=1**\r\n\r\nThe method `welcome` in `UserMailerPreview` have a `@user_id` instance variable defined:\r\n\r\n```ruby\r\nclass UserMailerPreview\r\n  def welcome\r\n    user = @user_id ? User.find(@user_id) : mock_user\r\n    UserMailer.welcome(user)\r\n  end\r\nend\r\n```\r\n\r\nNow you can preview or send the welcome email to a specific user.\r\n\r\n### Routing\r\n\r\nYou can access REP urls like this:\r\n\r\n```ruby\r\n# engine root:\r\nrails_email_preview.rep_root_url\r\n# list of emails (same as root):\r\nrails_email_preview.rep_emails_url\r\n# email show:\r\nrails_email_preview.rep_email_url('user_mailer-welcome')\r\n```\r\n\r\n### Sending Emails\r\n\r\nYou can send emails via REP. This is especially useful when testing with limited clients (Blackberry, Outlook, etc.).\r\nThis will use the environment's mailer settings, but the handler will `perform_deliveries`.\r\nUncomment this line in the initializer to disable sending test emails:\r\n\r\n```ruby\r\nconfig.enable_send_email = false\r\n```\r\n\r\n### Editing Emails\r\n\r\nEmails can be stored in the database and edited in the browser.\r\nREP works with [Comfortable Mexican Sofa CMS](https://github.com/comfy/comfortable-mexican-sofa) to achieve this -- see the [CMS Guide](https://github.com/glebm/rails_email_preview/wiki/Edit-Emails-with-Comfortable-Mexican-Sofa) to learn more.\r\n\r\n[![screenshot](https://raw.github.com/glebm/rails_email_preview/master/doc/img/rep-edit-sofa.png)](https://github.com/glebm/rails_email_preview/wiki/Edit-Emails-with-Comfortable-Mexican-Sofa)\r\n\r\n### Premailer\r\n\r\n[Premailer](https://github.com/alexdunae/premailer) automatically translates standard CSS rules into old-school inline styles. Integration can be done by using the <code>before_render</code> hook.\r\n\r\nTo integrate Premailer with your Rails app you can use either [actionmailer_inline_css](https://github.com/ndbroadbent/actionmailer_inline_css) or [premailer-rails](https://github.com/fphilipe/premailer-rails).\r\nSimply uncomment the relevant options in [the initializer](https://github.com/glebm/rails_email_preview/blob/master/config/initializers/rails_email_preview.rb). *initializer is generated during `rails g rails_email_preview:install`*\r\n\r\n### I18n\r\n\r\nREP expects emails to use current `I18n.locale`:\r\n\r\n```ruby\r\n# current locale\r\nAccountMailer.some_notification.deliver\r\n# different locale\r\nI18n.with_locale('es') do\r\n  InviteMailer.send_invites.deliver\r\nend\r\n```\r\n\r\nIf you are using `Resque::Mailer` or `Devise::Async`, you can automatically remember `I18n.locale` when the mail job is scheduled\r\n[with this initializer](https://gist.github.com/glebm/5725347).\r\n\r\nWhen linking to REP pages you can pass `email_locale` to set the locale for rendering:\r\n\r\n```ruby\r\n# will render email in Spanish:\r\nrails_email_preview.root_url(email_locale: 'es')\r\n```\r\n\r\nREP displays too many locales? Make sure to set `config.i18n.available_locales`, since it defaults to *all* locales in Rails.\r\n\r\nUser interface is available in English, German (Danke, @baschtl), and Russian.\r\nYou can set the language in `config.to_prepare` section of the initializer, default is English.\r\n\r\n```ruby\r\n# config/initializers/rails_email_preview.rb\r\nRailsEmailPreview.locale = :de\r\n```\r\n\r\n### Views\r\n\r\nYou can render all REP views inside your app layout (this will need styling to look nice if you don't use bootstrap):\r\n\r\n```ruby\r\nRails.application.config.to_prepare do\r\n  # Use admin layout with REP (this will also make app routes accessible within REP):\r\n  RailsEmailPreview.layout = 'admin'\r\nend\r\n```\r\n\r\nYou can `//= require 'rails_email_preview/layout'` REP-specific styles (`@import 'rails_email_preview/layout'` for SASS).\r\n\r\nREP also allows you to customize some of the element classes via [`RailsEmailPreview.style`](/lib/rails_email_preview.rb#L34).\r\n\r\nYou can also override any individual view by placing a file with the same path in your project's `app/views`,\r\ne.g. `app/views/rails_email_preview/emails/index.html.slim`.\r\n\r\n#### Hooks\r\n\r\nYou can add content around or replacing REP UI elements by registering view hooks in the initializer:\r\n\r\n```ruby\r\n# Pass position (before, after, or replace) and render arguments:\r\nRailsEmailPreview.view_hooks.add_render :list, :before, partial: 'shared/hello'\r\n\r\n# Pass hook id and position (before, after, or replace):\r\nRailsEmailPreview.view_hooks.add :headers_content, :after do |mail:, preview:|\r\n  raw \"<dt>ID</dt><dd>#{h mail.header['X-APP-EMAIL-ID']}</dd>\"\r\nend\r\n```\r\n\r\nAll of the available hooks can be found [here](/lib/rails_email_preview/view_hooks.rb#L10).\r\n\r\n### Authentication & authorization\r\n\r\nYou can specify the parent controller for REP controller, and it will inherit all the before filters.\r\nNote that this must be placed before any other references to REP application controller in the initializer (and before `layout=` call):\r\n\r\n```ruby\r\nRailsEmailPreview.parent_controller = 'Admin::ApplicationController' # default: '::ApplicationController'\r\n```\r\n\r\nAlternatively, to have custom rules just for REP you can:\r\n\r\n```ruby\r\nRails.application.config.to_prepare do\r\n  RailsEmailPreview::ApplicationController.module_eval do\r\n    before_filter :check_rep_permissions\r\n\r\n    private\r\n    def check_rep_permissions\r\n       render status: 403 unless current_user && can_manage_emails?(current_user)\r\n    end\r\n  end\r\nend\r\n```\r\n\r\n## Development\r\n\r\nRun the tests:\r\n\r\n```console\r\n$ rspec\r\n```\r\n\r\nStart a development web server on [localhost:9292](http://localhost:9292):\r\n\r\n```console\r\n$ rake dev\r\n```\r\n\r\nThis project rocks and uses MIT-LICENSE.\r\n\r\n[rep-nav-screenshot]: https://raw.github.com/glebm/rails_email_preview/master/doc/img/rep-nav.png \"Email List Screenshot\"\r\n[rep-show-screenshot]: https://raw.github.com/glebm/rails_email_preview/master/doc/img/rep-show.png \"Show Email Screenshot\"\r\n[rep-show-default-screenshot]: https://raw.github.com/glebm/rails_email_preview/master/doc/img/rep-show-default.png \"Show Email Screenshot (default styles)\"\r\n[travis]: http://travis-ci.org/glebm/rails_email_preview\r\n[travis-badge]: http://img.shields.io/travis/glebm/rails_email_preview.svg\r\n[gem]: https://rubygems.org/gems/rails_email_preview\r\n[gem-badge]: http://img.shields.io/gem/v/rails_email_preview.svg\r\n[codeclimate]: https://codeclimate.com/github/glebm/rails_email_preview\r\n[codeclimate-badge]: http://img.shields.io/codeclimate/github/glebm/rails_email_preview.svg\r\n[coverage]: https://codeclimate.com/github/glebm/rails_email_preview\r\n[coverage-badge]: https://codeclimate.com/github/glebm/rails_email_preview/badges/coverage.svg\r\n","google":"UA-65961090-1","note":"Don't delete this file! It's used internally to help with page regeneration."}